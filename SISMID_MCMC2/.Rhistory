#note that we plot virus load instead of infected cells by multiplying I by p/c
ymin=1e0; ymax=1e12;
#model without CTL immune response
plot(odeoutput1[,1],odeoutput1[,2],type="l",xlab="time (days)",ylab="",col="green",lwd=2,log="y",xlim=c(0,tmax),ylim=c(ymin,ymax),main="no CTL")
lines(odeoutput1[,1],p/clear*odeoutput1[,4],type="l",col="red",lwd=2) #multiply by p/clear to plot virus instead of infected cells
lines(odeoutput1[,1],odeoutput1[,5],type="l",col="blue",lwd=2)
lines(odeoutput1[,1],odeoutput1[,6],type="l",col="black",lwd=2)
#model with CTL immune response, no vaccination
plot(odeoutput2[,1],odeoutput2[,2],type="l",xlab="time (days)",ylab="",col="green",lwd=2,log="y",xlim=c(0,tmax),ylim=c(ymin,ymax),main="no vaccination")
lines(odeoutput2[,1],p/clear*odeoutput2[,4],type="l",col="red",lwd=2)
lines(odeoutput2[,1],odeoutput2[,5],type="l",col="blue",lwd=2)
lines(odeoutput2[,1],odeoutput2[,6],type="l",col="black",lwd=2)
#model with CTL immune response, with vaccination
plot(odeoutput3[,1],odeoutput3[,2],type="l",xlab="time (days)",ylab="",col="green",lwd=2,log="y",xlim=c(0,tmax),ylim=c(ymin,ymax),main="with vaccination")
lines(odeoutput3[,1],p/clear*odeoutput3[,4],type="l",col="red",lwd=2)
lines(odeoutput3[,1],odeoutput3[,5],type="l",col="blue",lwd=2)
lines(odeoutput3[,1],odeoutput3[,6],type="l",col="black",lwd=2)
legend(40,1e11, c("U","V","nCTL","aCTL"),col = c("green","red","blue","black"),lwd=2, cex=0.7)
#virus and CTL for model with CTL immune response, vaccination and no vaccination
plot(odeoutput3[,1],p/clear*odeoutput3[,4],type="l",lty=2,xlab="time (days)",ylab="",col="green",lwd=2,log="y",xlim=c(0,tmax),ylim=c(ymin,ymax),main="comparison")
lines(odeoutput3[,1],odeoutput3[,6],type="l",col="green",lwd=2)
lines(odeoutput2[,1],p/clear*odeoutput2[,4],type="l",lty=2,col="red",lwd=2)
lines(odeoutput2[,1],p/clear*odeoutput2[,6],type="l",col="red",lwd=2)
legend(40,1e11, c("vaccinated V","CTL","non-vaccinated V","CTL"),col = c("green","green","red","red"),lwd=2,lty=c(2,1,2,1), cex=0.7)
############################################################
#a simple model for a bacteria infection, used to illustrate model analysis
##written by Andreas Handel, ahandel@uga.edu, last change 6/20/14
############################################################
rm(list=ls()) #this clears the workspace to make sure no leftover variables are floating around. Not strictly needed
graphics.off(); #close all graphics windows
library(deSolve)  #loads ODE solver package
#functions come first, main program below
###################################################################
#function that specificies the ode model called by lsoda (the ode solver)
###################################################################
odeequations=function(t,y,parameters)
{
B=y[1]; X=y[2]; #bacteria and immune response
g=parameters[1]; Bmax=parameters[2]; k=parameters[3]; r=parameters[4]; d=parameters[5];
#these are the differential equations
dBdt=g*B*(1-B/Bmax)-k*B*X;
dXdt=r*B*X-d*X;
return(list(c(dBdt,dXdt)));
} #end function specifying the ODEs
###################################################################
#main program
###################################################################
B0=10; #initial number of bacteria
X0=1; #initial level of immune response
Y0=c(B0, X0);  #combine initial conditions into a vector
tmax=365;  #number of days
timevec=seq(0,tmax,0.05); #vector of times for which integration is evaluated
#values for fixed model parameters, units are 1/days
k=1e-7; #kill rate
Bmax=1e7;  #bacteria carrying capacity
d=0.1;  #immune response death rate
g=0.5; #bacteria growth rate
samplemax=20; #number of samples/values for parameter r
rvec=10^seq(-7,-4,length=samplemax) #create values for r spaced logarithmically between 10E-7 and 10E-4
ploton=1; #set this to 1 if you want to see the time-series for every parameter sample. Leave it at zero to make the code run faster.
#####################
Bpeak=rep(0,samplemax); #initialize vector that will contain the solution
#this is the loop over samplemax samples for the parameter values
for (nsample in 1:samplemax)
{
print(sprintf('Starting Simulation %d of %d',nsample,samplemax));
#values for sampled parameters
r=rvec[nsample];
parameters=c(g,Bmax,k,r,d); #vector of parameters which is sent to the ODE function
#call ode-solver to integrate ODEs
#see the documentation of the deSolve package to learn the difference between this solver and lsoda
#I'm using vode instead of lsoda since I found that lsoda occasionally failed for this problem
odeoutput=vode(Y0,timevec,odeequations,parameters,mf=22,atol=1e-12,rtol=1e-12,hini=1e-10);
vl=length(odeoutput[,1]);
#we can plot time series every time if we want, just to watch what happens - is not necessary to do so
if (ploton==1)
{
plot(odeoutput[,1],odeoutput[,2],col="red",type="l",lwd=2,log="y",xlim=c(0,tmax),ylim=c(1,1e8),xlab="time (days)",ylab="")
lines(odeoutput[,1],odeoutput[,3],col="blue",lwd=2)
legend("topright",c("Bacteria","IR"),col=c("red","blue"),lwd=2)
}
#record the peak value for B
Bpeak[nsample]=max(odeoutput[,2]);
}
#produce result plot
plot(rvec,Bpeak,log="xy",pch=20,col="blue",xlab="IR Activation Rate",ylab="Bacteria Peak")
###################################################################
#end main program
###################################################################
r=rvec[nsample];
r
rvec
############################################################
#a simple model for a bacteria infection, used to illustrate model analysis
##written by Andreas Handel, ahandel@uga.edu, last change 6/20/14
############################################################
rm(list=ls()) #this clears the workspace to make sure no leftover variables are floating around. Not strictly needed
graphics.off(); #close all graphics windows
library(deSolve)  #loads ODE solver package
#functions come first, main program below
###################################################################
#function that specificies the ode model called by lsoda (the ode solver)
###################################################################
odeequations=function(t,y,parameters)
{
B=y[1]; X=y[2]; #bacteria and immune response
g=parameters[1]; Bmax=parameters[2]; k=parameters[3]; r=parameters[4]; d=parameters[5];
#these are the differential equations
dBdt=g*B*(1-B/Bmax)-k*B*X;
dXdt=r*B*X-d*X;
return(list(c(dBdt,dXdt)));
} #end function specifying the ODEs
###################################################################
#main program
###################################################################
B0=10; #initial number of bacteria
X0=1; #initial level of immune response
Y0=c(B0, X0);  #combine initial conditions into a vector
tmax=365;  #number of days
timevec=seq(0,tmax,0.05); #vector of times for which integration is evaluated
#values for fixed model parameters, units are 1/days
k=1e-7; #kill rate
Bmax=1e7;  #bacteria carrying capacity
d=0.1;  #immune response death rate
g=0.5; #bacteria growth rate
samplemax=20; #number of samples/values for parameter r
rvec=10^seq(-7,-4,length=samplemax) #create values for r spaced logarithmically between 10E-7 and 10E-4
ploton=1; #set this to 1 if you want to see the time-series for every parameter sample. Leave it at zero to make the code run faster.
#####################
Bpeak=rep(0,samplemax); #initialize vector that will contain the solution
#this is the loop over samplemax samples for the parameter values
for (nsample in 1:samplemax)
{
print(sprintf('Starting Simulation %d of %d',nsample,samplemax));
#values for sampled parameters
r=rvec[nsample];
parameters=c(g,Bmax,k,r,d); #vector of parameters which is sent to the ODE function
#call ode-solver to integrate ODEs
#see the documentation of the deSolve package to learn the difference between this solver and lsoda
#I'm using vode instead of lsoda since I found that lsoda occasionally failed for this problem
odeoutput=vode(Y0,timevec,odeequations,parameters,mf=22,atol=1e-12,rtol=1e-12,hini=1e-10);
vl=length(odeoutput[,1]);
#we can plot time series every time if we want, just to watch what happens - is not necessary to do so
if (ploton==1)
{
plot(odeoutput[,1],odeoutput[,2],col="red",type="l",lwd=2,log="y",xlim=c(0,tmax),ylim=c(1,1e8),xlab="time (days)",ylab="")
lines(odeoutput[,1],odeoutput[,3],col="blue",lwd=2)
legend("topright",c("Bacteria","IR"),col=c("red","blue"),lwd=2)
text(00, 1e+01,sprintf('r = %d',r))
}
#record the peak value for B
Bpeak[nsample]=max(odeoutput[,2]);
}
#produce result plot
plot(rvec,Bpeak,log="xy",pch=20,col="blue",xlab="IR Activation Rate",ylab="Bacteria Peak")
###################################################################
#end main program
###################################################################
plot(odeoutput[,1],odeoutput[,2],col="red",type="l",lwd=2,log="y",xlim=c(0,tmax),ylim=c(1,1e8),xlab="time (days)",ylab="")
lines(odeoutput[,1],odeoutput[,3],col="blue",lwd=2)
legend("topright",c("Bacteria","IR"),col=c("red","blue"),lwd=2)
text(00, 1e+01,sprintf('r = %d',r))
text(00, 1e+01,sprintf('r = %f',r))
text(100, 1e+01,sprintf('r = %f',r))
r
text(100, 1e+01,sprintf('r = %f',r))
text(100, 1e+01,paste0('r = ',r))
lines(odeoutput[,1],odeoutput[,3],col="blue",lwd=2)
plot(odeoutput[,1],odeoutput[,2],col="red",type="l",lwd=2,log="y",xlim=c(0,tmax),ylim=c(1,1e8),xlab="time (days)",ylab="")
lines(odeoutput[,1],odeoutput[,3],col="blue",lwd=2)
legend("topright",c("Bacteria","IR"),col=c("red","blue"),lwd=2)
text(100, 1e+01,paste0('r = ',r))
############################################################
#a simple model for a bacteria infection, used to illustrate model analysis
##written by Andreas Handel, ahandel@uga.edu, last change 6/20/14
############################################################
rm(list=ls()) #this clears the workspace to make sure no leftover variables are floating around. Not strictly needed
graphics.off(); #close all graphics windows
library(deSolve)  #loads ODE solver package
#functions come first, main program below
###################################################################
#function that specificies the ode model called by lsoda (the ode solver)
###################################################################
odeequations=function(t,y,parameters)
{
B=y[1]; X=y[2]; #bacteria and immune response
g=parameters[1]; Bmax=parameters[2]; k=parameters[3]; r=parameters[4]; d=parameters[5];
#these are the differential equations
dBdt=g*B*(1-B/Bmax)-k*B*X;
dXdt=r*B*X-d*X;
return(list(c(dBdt,dXdt)));
} #end function specifying the ODEs
###################################################################
#main program
###################################################################
B0=10; #initial number of bacteria
X0=1; #initial level of immune response
Y0=c(B0, X0);  #combine initial conditions into a vector
tmax=365;  #number of days
timevec=seq(0,tmax,0.05); #vector of times for which integration is evaluated
#values for fixed model parameters, units are 1/days
k=1e-7; #kill rate
Bmax=1e7;  #bacteria carrying capacity
d=0.1;  #immune response death rate
g=0.5; #bacteria growth rate
samplemax=20; #number of samples/values for parameter r
rvec=10^seq(-7,-4,length=samplemax) #create values for r spaced logarithmically between 10E-7 and 10E-4
ploton=1; #set this to 1 if you want to see the time-series for every parameter sample. Leave it at zero to make the code run faster.
#####################
Bpeak=rep(0,samplemax); #initialize vector that will contain the solution
#this is the loop over samplemax samples for the parameter values
for (nsample in 1:samplemax)
{
print(sprintf('Starting Simulation %d of %d',nsample,samplemax));
#values for sampled parameters
r=rvec[nsample];
parameters=c(g,Bmax,k,r,d); #vector of parameters which is sent to the ODE function
#call ode-solver to integrate ODEs
#see the documentation of the deSolve package to learn the difference between this solver and lsoda
#I'm using vode instead of lsoda since I found that lsoda occasionally failed for this problem
odeoutput=vode(Y0,timevec,odeequations,parameters,mf=22,atol=1e-12,rtol=1e-12,hini=1e-10);
vl=length(odeoutput[,1]);
#we can plot time series every time if we want, just to watch what happens - is not necessary to do so
if (ploton==1)
{
plot(odeoutput[,1],odeoutput[,2],col="red",type="l",lwd=2,log="y",xlim=c(0,tmax),ylim=c(1,1e8),xlab="time (days)",ylab="")
lines(odeoutput[,1],odeoutput[,3],col="blue",lwd=2)
legend("topright",c("Bacteria","IR"),col=c("red","blue"),lwd=2)
text(300, 1e+01,paste0('r = ',r))
}
#record the peak value for B
Bpeak[nsample]=max(odeoutput[,2]);
}
#produce result plot
plot(rvec,Bpeak,log="xy",pch=20,col="blue",xlab="IR Activation Rate",ylab="Bacteria Peak")
###################################################################
#end main program
###################################################################
############################################################
#a simple model for a bacteria infection, used to illustrate model analysis
##written by Andreas Handel, ahandel@uga.edu, last change 6/20/14
############################################################
rm(list=ls()) #this clears the workspace to make sure no leftover variables are floating around. Not strictly needed
graphics.off(); #close all graphics windows
library(deSolve)  #loads ODE solver package
#functions come first, main program below
###################################################################
#function that specificies the ode model called by lsoda (the ode solver)
###################################################################
odeequations=function(t,y,parameters)
{
B=y[1]; X=y[2]; #bacteria and immune response
g=parameters[1]; Bmax=parameters[2]; k=parameters[3]; r=parameters[4]; d=parameters[5];
#these are the differential equations
dBdt=g*B*(1-B/Bmax)-k*B*X;
dXdt=r*B*X-d*X;
return(list(c(dBdt,dXdt)));
} #end function specifying the ODEs
###################################################################
#main program
###################################################################
B0=10; #initial number of bacteria
X0=1; #initial level of immune response
Y0=c(B0, X0);  #combine initial conditions into a vector
tmax=365;  #number of days
timevec=seq(0,tmax,0.05); #vector of times for which integration is evaluated
#values for fixed model parameters, units are 1/days
k=1e-7; #kill rate
Bmax=1e7;  #bacteria carrying capacity
d=0.1;  #immune response death rate
g=0.5; #bacteria growth rate
samplemax=20; #number of samples/values for parameter r
rvec=10^seq(-7,-4,length=samplemax) #create values for r spaced logarithmically between 10E-7 and 10E-4
kvec=1^seq(-7,-4,length=samplemax) #create values for r spaced logarithmically between 10E-7 and 10E-4
ploton=1; #set this to 1 if you want to see the time-series for every parameter sample. Leave it at zero to make the code run faster.
#####################
Bpeak=rep(0,samplemax); #initialize vector that will contain the solution
#this is the loop over samplemax samples for the parameter values
for (nsample in 1:samplemax)
{
print(sprintf('Starting Simulation %d of %d',nsample,samplemax));
#values for sampled parameters
#r=rvec[nsample];
k=kvec[nsample];
parameters=c(g,Bmax,k,r,d); #vector of parameters which is sent to the ODE function
#call ode-solver to integrate ODEs
#see the documentation of the deSolve package to learn the difference between this solver and lsoda
#I'm using vode instead of lsoda since I found that lsoda occasionally failed for this problem
odeoutput=vode(Y0,timevec,odeequations,parameters,mf=22,atol=1e-12,rtol=1e-12,hini=1e-10);
vl=length(odeoutput[,1]);
#we can plot time series every time if we want, just to watch what happens - is not necessary to do so
if (ploton==1)
{
plot(odeoutput[,1],odeoutput[,2],col="red",type="l",lwd=2,log="y",xlim=c(0,tmax),ylim=c(1,1e8),xlab="time (days)",ylab="")
lines(odeoutput[,1],odeoutput[,3],col="blue",lwd=2)
legend("topright",c("Bacteria","IR"),col=c("red","blue"),lwd=2)
#text(300, 1e+01,paste0('r = ',r))
}
#record the peak value for B
Bpeak[nsample]=max(odeoutput[,2]);
}
#produce result plot
plot(rvec,Bpeak,log="xy",pch=20,col="blue",xlab="IR Activation Rate",ylab="Bacteria Peak")
###################################################################
#end main program
###################################################################
############################################################
#a simple model for a bacteria infection, used to illustrate model analysis
##written by Andreas Handel, ahandel@uga.edu, last change 6/20/14
############################################################
rm(list=ls()) #this clears the workspace to make sure no leftover variables are floating around. Not strictly needed
graphics.off(); #close all graphics windows
library(deSolve)  #loads ODE solver package
#functions come first, main program below
###################################################################
#function that specificies the ode model called by lsoda (the ode solver)
###################################################################
odeequations=function(t,y,parameters)
{
B=y[1]; X=y[2]; #bacteria and immune response
g=parameters[1]; Bmax=parameters[2]; k=parameters[3]; r=parameters[4]; d=parameters[5];
#these are the differential equations
dBdt=g*B*(1-B/Bmax)-k*B*X;
dXdt=r*B*X-d*X;
return(list(c(dBdt,dXdt)));
} #end function specifying the ODEs
###################################################################
#main program
###################################################################
B0=10; #initial number of bacteria
X0=1; #initial level of immune response
Y0=c(B0, X0);  #combine initial conditions into a vector
tmax=365;  #number of days
timevec=seq(0,tmax,0.05); #vector of times for which integration is evaluated
#values for fixed model parameters, units are 1/days
k=1e-7; #kill rate
Bmax=1e7;  #bacteria carrying capacity
d=0.1;  #immune response death rate
g=0.5; #bacteria growth rate
samplemax=20; #number of samples/values for parameter r
rvec=10^seq(-7,-4,length=samplemax) #create values for r spaced logarithmically between 10E-7 and 10E-4
kvec=1^seq(-7,-4,length=samplemax) #create values for r spaced logarithmically between 10E-7 and 10E-4
kvec
kvec=1e^seq(-7,-4,length=samplemax) #create values for r spaced logarithmically between 10E-7 and 10E-4
kvec=10^seq(-7,-4,length=samplemax) #create values for r spaced logarithmically between 10E-7 and 10E-4
kvec
############################################################
#a simple model for a bacteria infection, used to illustrate model analysis
##written by Andreas Handel, ahandel@uga.edu, last change 6/20/14
############################################################
rm(list=ls()) #this clears the workspace to make sure no leftover variables are floating around. Not strictly needed
graphics.off(); #close all graphics windows
library(deSolve)  #loads ODE solver package
#functions come first, main program below
###################################################################
#function that specificies the ode model called by lsoda (the ode solver)
###################################################################
odeequations=function(t,y,parameters)
{
B=y[1]; X=y[2]; #bacteria and immune response
g=parameters[1]; Bmax=parameters[2]; k=parameters[3]; r=parameters[4]; d=parameters[5];
#these are the differential equations
dBdt=g*B*(1-B/Bmax)-k*B*X;
dXdt=r*B*X-d*X;
return(list(c(dBdt,dXdt)));
} #end function specifying the ODEs
###################################################################
#main program
###################################################################
B0=10; #initial number of bacteria
X0=1; #initial level of immune response
Y0=c(B0, X0);  #combine initial conditions into a vector
tmax=365;  #number of days
timevec=seq(0,tmax,0.05); #vector of times for which integration is evaluated
#values for fixed model parameters, units are 1/days
k=1e-7; #kill rate
Bmax=1e7;  #bacteria carrying capacity
d=0.1;  #immune response death rate
g=0.5; #bacteria growth rate
samplemax=20; #number of samples/values for parameter r
rvec=10^seq(-7,-4,length=samplemax) #create values for r spaced logarithmically between 10E-7 and 10E-4
kvec=10^seq(-7,-4,length=samplemax) #create values for r spaced logarithmically between 10E-7 and 10E-4
ploton=1; #set this to 1 if you want to see the time-series for every parameter sample. Leave it at zero to make the code run faster.
#####################
Bpeak=rep(0,samplemax); #initialize vector that will contain the solution
#this is the loop over samplemax samples for the parameter values
for (nsample in 1:samplemax)
{
print(sprintf('Starting Simulation %d of %d',nsample,samplemax));
#values for sampled parameters
#r=rvec[nsample];
k=kvec[nsample];
parameters=c(g,Bmax,k,r,d); #vector of parameters which is sent to the ODE function
#call ode-solver to integrate ODEs
#see the documentation of the deSolve package to learn the difference between this solver and lsoda
#I'm using vode instead of lsoda since I found that lsoda occasionally failed for this problem
odeoutput=vode(Y0,timevec,odeequations,parameters,mf=22,atol=1e-12,rtol=1e-12,hini=1e-10);
vl=length(odeoutput[,1]);
#we can plot time series every time if we want, just to watch what happens - is not necessary to do so
if (ploton==1)
{
plot(odeoutput[,1],odeoutput[,2],col="red",type="l",lwd=2,log="y",xlim=c(0,tmax),ylim=c(1,1e8),xlab="time (days)",ylab="")
lines(odeoutput[,1],odeoutput[,3],col="blue",lwd=2)
legend("topright",c("Bacteria","IR"),col=c("red","blue"),lwd=2)
#text(300, 1e+01,paste0('r = ',r))
}
#record the peak value for B
Bpeak[nsample]=max(odeoutput[,2]);
}
#produce result plot
plot(rvec,Bpeak,log="xy",pch=20,col="blue",xlab="IR Activation Rate",ylab="Bacteria Peak")
###################################################################
#end main program
###################################################################
kvec=10^seq(-7,-4,length=samplemax) #create values for r spaced logarithmically between 10E-7 and 10E-4
kvec=10^seq(-7,-4,length=samplemax) #create values for k spaced logarithmically between 10E-7 and 10E-4
ploton=1; #set this to 1 if you want to see the time-series for every parameter sample. Leave it at zero to make the code run faster.
Bpeak=rep(0,samplemax); #initialize vector that will contain the solution
for (nsample in 1:samplemax)
{
print(sprintf('Starting Simulation %d of %d',nsample,samplemax));
#values for sampled parameters
#r=rvec[nsample];
k=kvec[nsample];
parameters=c(g,Bmax,k,r,d); #vector of parameters which is sent to the ODE function
#call ode-solver to integrate ODEs
#see the documentation of the deSolve package to learn the difference between this solver and lsoda
#I'm using vode instead of lsoda since I found that lsoda occasionally failed for this problem
odeoutput=vode(Y0,timevec,odeequations,parameters,mf=22,atol=1e-12,rtol=1e-12,hini=1e-10);
vl=length(odeoutput[,1]);
#we can plot time series every time if we want, just to watch what happens - is not necessary to do so
if (ploton==1)
{
plot(odeoutput[,1],odeoutput[,2],col="red",type="l",lwd=2,log="y",xlim=c(0,tmax),ylim=c(1,1e8),xlab="time (days)",ylab="")
lines(odeoutput[,1],odeoutput[,3],col="blue",lwd=2)
legend("topright",c("Bacteria","IR"),col=c("red","blue"),lwd=2)
#text(300, 1e+01,paste0('r = ',r))
}
#record the peak value for B
Bpeak[nsample]=max(odeoutput[,2]);
}
r=1e-7; #kill rate
kvec=10^seq(-7,-4,length=samplemax) #create values for k spaced logarithmically between 10E-7 and 10E-4
############################################################
#a simple model for a bacteria infection, used to illustrate model analysis
##written by Andreas Handel, ahandel@uga.edu, last change 6/20/14
############################################################
rm(list=ls()) #this clears the workspace to make sure no leftover variables are floating around. Not strictly needed
graphics.off(); #close all graphics windows
library(deSolve)  #loads ODE solver package
#functions come first, main program below
###################################################################
#function that specificies the ode model called by lsoda (the ode solver)
###################################################################
odeequations=function(t,y,parameters)
{
B=y[1]; X=y[2]; #bacteria and immune response
g=parameters[1]; Bmax=parameters[2]; k=parameters[3]; r=parameters[4]; d=parameters[5];
#these are the differential equations
dBdt=g*B*(1-B/Bmax)-k*B*X;
dXdt=r*B*X-d*X;
return(list(c(dBdt,dXdt)));
} #end function specifying the ODEs
###################################################################
#main program
###################################################################
B0=10; #initial number of bacteria
X0=1; #initial level of immune response
Y0=c(B0, X0);  #combine initial conditions into a vector
tmax=365;  #number of days
timevec=seq(0,tmax,0.05); #vector of times for which integration is evaluated
#values for fixed model parameters, units are 1/days
k=1e-7; #kill rate
Bmax=1e7;  #bacteria carrying capacity
d=0.1;  #immune response death rate
g=0.5; #bacteria growth rate
samplemax=20; #number of samples/values for parameter r
rvec=10^seq(-7,-4,length=samplemax) #create values for r spaced logarithmically between 10E-7 and 10E-4
r=1e-7; #kill rate
kvec=10^seq(-7,-4,length=samplemax) #create values for k spaced logarithmically between 10E-7 and 10E-4
ploton=1; #set this to 1 if you want to see the time-series for every parameter sample. Leave it at zero to make the code run faster.
#####################
Bpeak=rep(0,samplemax); #initialize vector that will contain the solution
#this is the loop over samplemax samples for the parameter values
for (nsample in 1:samplemax)
{
print(sprintf('Starting Simulation %d of %d',nsample,samplemax));
#values for sampled parameters
#r=rvec[nsample];
k=kvec[nsample];
parameters=c(g,Bmax,k,r,d); #vector of parameters which is sent to the ODE function
#call ode-solver to integrate ODEs
#see the documentation of the deSolve package to learn the difference between this solver and lsoda
#I'm using vode instead of lsoda since I found that lsoda occasionally failed for this problem
odeoutput=vode(Y0,timevec,odeequations,parameters,mf=22,atol=1e-12,rtol=1e-12,hini=1e-10);
vl=length(odeoutput[,1]);
#we can plot time series every time if we want, just to watch what happens - is not necessary to do so
if (ploton==1)
{
plot(odeoutput[,1],odeoutput[,2],col="red",type="l",lwd=2,log="y",xlim=c(0,tmax),ylim=c(1,1e8),xlab="time (days)",ylab="")
lines(odeoutput[,1],odeoutput[,3],col="blue",lwd=2)
legend("topright",c("Bacteria","IR"),col=c("red","blue"),lwd=2)
#text(300, 1e+01,paste0('r = ',r))
}
#record the peak value for B
Bpeak[nsample]=max(odeoutput[,2]);
}
#produce result plot
plot(rvec,Bpeak,log="xy",pch=20,col="blue",xlab="IR Activation Rate",ylab="Bacteria Peak")
###################################################################
#end main program
###################################################################
